if has("nvim")
" load init.lua
lua << EOF
    local home = vim.fn.expand('~')
    package.path = home .. '/.sword/vim/lua/?.lua;' .. package.path
    require('init')
EOF
endif

"""" basic setup
" Use vim settings, rather then vi settings (much better!)
" This must be first, because it changes other options as a side effect.
set nocompatible

" Vundle requires it to be off
filetype on

let mapleader=","

"" encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set bomb
set binary
set ttyfast
set fileformats="unix,dos,mac"

"""" appearance
set t_Co=256
if &t_Co > 1
    syntax on
endif
set number
set showcmd             " show command in bottom bar
" set cursorline          " highlight current line
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.
set ruler
set guioptions=egmrti
" set colorcolumn=120
call matchadd("ColorColumn", '\%121v', 80)
call matchadd("ColorColumn", '\%121v', 120)
highlight ColorColumn ctermbg=8 guibg=lightgrey
highlight LineNr ctermfg=grey
highlight CursorLine ctermbg=LightBlue

"""" split
set splitright

"""" remember the cursor last opened
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" change cursor from block to vertical line, allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

"""" tab, indent
set nowrap
set tabstop=4           " a tab is four spaces
set softtabstop=4       " when hitting <BS>, pretend like a tab is removed, even if spaces
set shiftwidth=4        " number of spaces to use for autoindenting
set autoindent          " always set autoindenting on
set fileformat=unix

augroup TabSettingFor2SpacesAsTab
  autocmd!
  autocmd FileType vim,javascript,typescript,vue,jsx,css,html,yaml,yml,sql,proto setlocal tabstop=2
    \ softtabstop=2
    \ shiftwidth=2
    \ expandtab
    \ textwidth=120
augroup END

augroup TabSettingForPython
  autocmd!
  autocmd FileType python setlocal expandtab
        \ textwidth=120
augroup END

augroup TabSettingForGo
  autocmd!
  autocmd FileType go setlocal noexpandtab
    \ textwidth=120
augroup END


" customized shell rc file
autocmd BufNewFile,BufRead shell.rc set filetype=zsh

" If one has a particular extension that one uses for binary files (such as exe,
" bin, etc), you may find it helpful to automate the process with the following
" bit of autocmds for your <.vimrc>.  Change that "*.bin" to whatever
" comma-separated list of extension(s) you find yourself wanting to edit:

" vim -b : edit binary using xxd-format!
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END

" folding
set foldenable           " enable folding
" set foldlevelstart=1     " open most folds by default
" set foldmethod=indent
" set foldmethod=syntax  " slow when the opend file is big
" set foldlevel=1


"""" search
set showmatch
set hlsearch
" clear highlight on pressing ESC
" nnoremap <esc> :noh<return><esc> " this cause VIM starting in REPLACE mode
nnoremap <leader><space> :noh<return>
"nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>


"""" misc
" set hidden
set history=10000

" disable mouse
set mouse=

"""" clipboard
" paste without clipboard overwritten
xnoremap <leader>p "_dP


"""" references
" A Good Vimrc https://dougblack.io/words/a-good-vimrc.html
" https://neovim.io/doc/user/usr_06.html

"""" neovim

if has('nvim')

endif

" check if it's macos
if has("mac")
    let g:python3_host_prog = '/opt/homebrew/bin/python3'
endif


"""" features of specific file/type of files

" Python breakpoint
au BufRead,BufNewFile *.py
  \ nnoremap <leader>b oimport pdb; pdb.set_trace()  # XXX BREAKPOINT<Esc>

" source ~/.sword/vim/vundle.vimrc
source ~/.sword/vim/plug.vimrc

" enable 24 bit true color
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" enable italics
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

"""" Line number
" turn hybrid line numbers on
set number relativenumber
" set nu rnu

" turn hybrid line numbers off
" set nonumber norelativenumber
" set nonu nornu

" toggle hybrid line numbers
" set number! relativenumber!
" set nu! rnu!

" highlight current line
set cursorline

" spell check, it highlits wrong spells, press `z=` for suggestions
" `zg` to add to dictionary
setlocal spell spelllang=en

if has("nvim")
" load init.lua
lua << EOF
    local home = vim.fn.expand('~')
    package.path = home .. '/.sword/vim/lua/?.lua;' .. package.path
    require('init-after')
EOF
endif

